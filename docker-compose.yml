version: '3.8'
services:
  # ---------------------------
  # Redis 服务（缓存）
  # ---------------------------
  redis:
    image: "redis:8.0"
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network
    environment:
      - TZ=Asia/Shanghai  # 设置时区
  # ---------------------------
  # Dragonfly 服务（缓存）
  # ---------------------------
#  dragonfly:
#    image: "dragonflydb/dragonfly:v1.27.1"
#    ports:
#      - "6379:6379"
#    healthcheck:
#      test: [ "CMD", "redis-cli", "-h", "localhost", "ping" ]
#      interval: 5s
#      timeout: 3s
#      retries: 5
#    networks:
#      - app-network
#    environment:
#      - TZ=Asia/Shanghai  # 设置时区
  # ---------------------------
  # MySQL 服务（数据库）
  # ---------------------------
  mysql:
    image: "mysql:8.0"
    ports:
      - "3306:3306"
    command: [ "mysqld", "--default-authentication-plugin=mysql_native_password", "--bind-address=0.0.0.0", "--init-file=/docker-entrypoint-initdb.d/init_mysql.sql" ]
    environment:
      MYSQL_ROOT_PASSWORD: "325523"
      MYSQL_DATABASE: "agricultural_vision"
      MYSQL_ROOT_HOST: "%"  # 允许root从任何主机连接
      TZ: Asia/Shanghai                        # 设置时区
    volumes:
      # 新增：将命名卷 mysql-data 挂载到容器的 /var/lib/mysql 目录
      - mysql-data:/var/lib/mysql
      # 保留：初始化脚本的挂载
      - ./init_mysql.sql:/docker-entrypoint-initdb.d/init_mysql.sql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p325523" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - app-network
  # ---------------------------
  # PostgreSQL 服务（数据库）
  # ---------------------------
  postgres:
    image: "postgres:17"  # 使用官方的 PostgreSQL 镜像，推荐指定一个明确的主版本
    ports:
      - "5432:5432"      # PostgreSQL 的默认端口是 5432
    environment:
      POSTGRES_USER: "root"                     # 设置超级用户的用户名
      POSTGRES_PASSWORD: "325523"               # 设置超级用户的密码
      POSTGRES_DB: "agricultural_vision"        # 容器启动时要创建的数据库名称
      TZ: Asia/Shanghai                         # 设置时区
    volumes:
      # 新增：将命名卷 postgres-data 挂载到容器的 /var/lib/postgresql/data 目录
      - postgres-data:/var/lib/postgresql/data
      # 保留：初始化脚本的挂载
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql # 挂载初始化脚本
    healthcheck:
      # 使用 pg_isready 工具来检查 PostgreSQL 服务是否就绪
      test: [ "CMD-SHELL", "pg_isready -U root -d agricultural_vision" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - app-network

  # Nginx 负载均衡器
#  nginx:
#    image: nginx:alpine
#    ports:
#      - "80:80"
#      - "443:443"  # 如果需要 HTTPS
#    volumes:
#      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
#      - ./conf/nginx/conf.d:/etc/nginx/conf.d:ro
#    depends_on:
#      - agricultural_vision_1
#      - agricultural_vision_2
#      - agricultural_vision_3
#    networks:
#      - app-network
#    environment:
#      - TZ=Asia/Shanghai  # 设置时区
#    healthcheck:
#      test: ["CMD-SHELL", "nginx -t || exit 1"]
#      interval: 5s
#      timeout: 5s
#      retries: 3
#      start_period: 10s

  # ---------------------------
  # Envoy 代理（API 网关）
  # ---------------------------
  envoy:
    image: envoyproxy/envoy:v1.33-latest
    ports:
      - "80:10000"     # HTTP 端口
      - "9901:9901"    # Envoy 管理界面
    volumes:
      - ./conf/envoy/envoy.yaml:/etc/envoy/envoy.yaml:ro
    command: /usr/local/bin/envoy -c /etc/envoy/envoy.yaml
    depends_on:
      - agricultural_vision_1
      - agricultural_vision_2
      - agricultural_vision_3
    restart: unless-stopped
    networks:
      - app-network
    environment:
      - TZ=Asia/Shanghai  # 设置时区
    # --- Docker 容器健康检查 ---
#    healthcheck:
#      # 使用 curl 命令检查 Envoy 管理界面的 /ready 端点
#      # -f: 当服务器返回错误时 (HTTP code >= 400)，curl 以非零状态码退出
#      test: ["CMD", "curl", "-f", "http://localhost:9901/ready"]
#      interval: 10s       # 每10秒检查一次
#      timeout: 5s         # 检查超时时间5秒
#      retries: 3          # 重试3次失败后，将容器标记为 unhealthy
#      start_period: 15s   # 启动容器后，给予15秒的宽限期，在此期间即使检查失败也不会计入重试次数

  # ---------------------------
  # etcd 服务（用于服务发现/配置中心）
  # ---------------------------
  etcd:
    image: bitnami/etcd:3.6
    container_name: etcd
    ports:
      - "2379:2379"
    environment:
      - ETCD_NAME=etcd-node1          # 节点名称（唯一标识）
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_INITIAL_CLUSTER=etcd-node1=http://etcd:2380  # 与 ETCD_NAME 一致
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd:2380
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ALLOW_NONE_AUTHENTICATION=yes  # 开发环境允许无认证
      - TZ=Asia/Shanghai  # 设置时区
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "etcdctl --endpoints=http://localhost:2379 endpoint health"]
      interval: 5s
      timeout: 5s
      retries: 5

  # ---------------------------
  # RocketMQ 5.3 服务
  # ---------------------------
  # 1. Name Server 服务
  # 负责服务发现，Broker 在此注册，Client 在此发现 Broker。
#  rmqnamesrv:
#    image: apache/rocketmq:5.3.3
#    container_name: rmqnamesrv
#    ports:
#      - "9876:9876" # Name Server 默认端口
#    command: sh mqnamesrv
#    networks:
#      - app-network
#    healthcheck:
#      # 使用 RocketMQ admin 工具检查集群状态
#      test: ["CMD-SHELL", "sh mqadmin clusterList -n localhost:9876"]
#      interval: 15s
#      timeout: 5s
#      retries: 5
#    volumes:
#      - rmq-namesrv-logs:/home/rocketmq/logs

  # 2. Broker 服务
  # 负责消息存储和处理。它依赖于 Name Server。
#  rmqbroker:
#    image: apache/rocketmq:5.3.3
#    container_name: rmqbroker
#    ports:
#      - "10911:10911" # Broker 与客户端通信的端口
#      - "10909:10909" # Broker VIP 通道端口
#    command: sh mqbroker -c /home/rocketmq/rocketmq-5.3.3/conf/broker.conf
#    depends_on:
#      rmqnamesrv:
#        condition: service_healthy # 确保 Name Server 健康后再启动 Broker
#    environment:
#      - NAMESRV_ADDR=rmqnamesrv:9876 # 告诉 Broker 去哪里注册
#      - ROCKETMQ_CONFIG_brokerIP1=rmqbroker # 设置 Broker 的 IP 为容器名，用于内部网络通信
#      - ROCKETMQ_CONFIG_autoCreateTopicEnable=true # 允许自动创建 Topic，便于开发
#      - TZ=Asia/Shanghai # 设置时区
#    networks:
#      - app-network
#    volumes:
#      - rmq-broker-logs:/home/rocketmq/logs
#      - rmq-broker-store:/home/rocketmq/store
#      - ./broker.conf:/home/rocketmq/rocketmq-5.3.3/conf/broker.conf # 挂载自定义配置文件

  # 3. (可选但推荐) RocketMQ Dashboard
  # 提供一个 Web UI 来管理 Topic、消费者、消息等。
#  rmqdashboard:
#    image: apacherocketmq/rocketmq-dashboard:latest
#    container_name: rmqdashboard
#    ports:
#      - "8081:8080" # 将容器的 8080 端口映射到主机的 8081，避免冲突
#    depends_on:
#      - rmqnamesrv
#    environment:
#      - NAMESRV_ADDR=rmqnamesrv:9876 # 告诉 Dashboard 去哪里连接 Name Server
#    networks:
#      - app-network

  # ---------------------------
  # Pulsar 3.3 服务 (单机模式)
  # ---------------------------
  pulsar:
    image: apachepulsar/pulsar:3.3.7
    container_name: pulsar
    ports:
      - "6650:6650"  # Pulsar 二进制协议端口
      - "8080:8080"  # Pulsar 管理后台 HTTP 端口
    command: >
      /bin/bash -c
      "bin/apply-config-from-env.py conf/standalone.conf &&
       exec bin/pulsar standalone"
    environment:
      # -- Pulsar 配置 --
      # 允许无认证的生产者/消费者连接
      - PULSAR_PREFIX_authenticationEnabled=false
      # 允许无认证的管理操作
      - PULSAR_PREFIX_authorizationEnabled=false
      # 允许在没有创建租户的情况下创建命名空间
      - PULSAR_PREFIX_allowAutoTopicCreationType=non-partitioned
      # 默认创建非分区主题
      - PULSAR_PREFIX_brokerDeleteInactiveTopicsEnabled=false
      # 不自动删除不活跃的主题
      - TZ=Asia/Shanghai # 设置时区
    networks:
      - app-network
    healthcheck:
      # 使用 pulsar-admin 工具检查 broker 的健康状况
      test: ["CMD-SHELL", "curl -s http://localhost:8080/admin/v2/brokers/healthcheck || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pulsar-data:/pulsar/data
  # ---------------------------
  # Kafka 4.0 服务（无 ZooKeeper）
  # ---------------------------
  kafka:
    image: bitnami/kafka:4.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=controller,broker  # 控制器和 broker 角色
      - KAFKA_CFG_NODE_ID=1                        # 节点 ID
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093  # 控制器通信地址
      - KAFKA_CFG_LISTENERS=CONTROLLER://:9093,PLAINTEXT://:9092  # 新增控制器监听协议
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT  # 协议映射
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER  # 明确控制器监听名称
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - TZ=Asia/Shanghai  # 设置时区
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - kafka-data:/bitnami/kafka

  # 应用实例1
  agricultural_vision_1:
    build: .
    command: sh -c "/app/wait-for.sh redis:6379 mysql:3306 -- /app/agricultural_vision /app/conf/config.yaml"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    expose:
      - "8080"  # 只在内部网络暴露端口
    networks:
      - app-network
    environment:
      - GIN_MODE=release
      - INSTANCE_NAME=vision-instance-1  # 设置实例名称
      - TZ=Asia/Shanghai  # 设置时区

  # 应用实例2
  agricultural_vision_2:
    build: .
    command: sh -c "/app/wait-for.sh redis:6379 mysql:3306 -- /app/agricultural_vision /app/conf/config.yaml"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    expose:
      - "8080"
    networks:
      - app-network
    environment:
      - GIN_MODE=release
      - INSTANCE_NAME=vision-instance-2  # 设置实例名称
      - TZ=Asia/Shanghai  # 设置时区

  # 应用实例3
  agricultural_vision_3:
    build: .
    command: sh -c "/app/wait-for.sh redis:6379 mysql:3306 -- /app/agricultural_vision /app/conf/config.yaml"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    expose:
      - "8080"
    networks:
      - app-network
    environment:
      - GIN_MODE=release
      - INSTANCE_NAME=vision-instance-3  # 设置实例名称
      - TZ=Asia/Shanghai  # 设置时区

volumes:
  postgres-data:
  mysql-data:
  kafka-data:
  pulsar-data:
  rmq-namesrv-logs:
  rmq-broker-logs:
  rmq-broker-store:
# ---------------------------
# 网络配置
# ---------------------------
networks:
  app-network:
    driver: bridge